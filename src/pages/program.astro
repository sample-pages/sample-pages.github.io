---
import Layout from "../layouts/Layout.astro";

const times = ["7:00","8:00","9:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00","18:00","19:00","20:00","21:00","22:00","23:00"];
const venues = ["研修室AB", "研修室C", "羽衣青少年センター", "バーベキューガーデン羽衣"];
const venueWidths = [150, 150, 150, 150];
---

<Layout title="日程・プログラム｜第8回うぃーすた全国交流会">
  <div class="overflow-hidden relative z-[-1] mt-[80px] lg:mt-[78px] bg-[#fffdfd] border-b-[4px] border-red-100 w-full h-72 flex flex-col justify-center pl-8 zen-kaku-gothic-new">
    <span class="overflow-hidden ml-10 pt-3 max-md:ml-1 text-[50px] font-bold outline-text tracking-widest shiny-slide z-0">
      PROGRAM
    </span>
    
    <span class="bg-[#fffdfd] mt-3 ml-10 pb-3 h-30 max-md:ml-1 text-[20px] z-10">
      開催概要
    </span>
  </div>
  <div class="bg-white/30 text-color zen-kaku-gothic-new text-sm lg:text-base" style="line-height: 2.05;">
    <div class="margin-contents pt-8 md:px-12 max-md:px-6">

    <div class="h-[30px] md:h-[40px]"></div>
    <p class="midashi">開催日程</p>
    <div style="height: 10px;"></div>
    <div class="ml-1" style="max-width: 56rem; letter-spacing: .025em; margin-bottom: 3px; line-height: 2.05;">
      <p>
        2026年7月18日(土)〜7月19日(日)</p>
    </div>
    <div style="height: 40px;"></div>
    <p class="midashi">開催場所</p>
    <div style="height: 10px;"></div>
    <div class="ml-1" style="max-width: 56rem; letter-spacing: .025em; margin-bottom: 3px; line-height: 2.05;">
      <p>
        <a class="hover-color" href="https://osaka-yha.or.jp/osakakokusai/">大阪国際ユースホステル・羽衣青少年センター<br>
          （リンク<i class="ri-arrow-right-up-long-line"></i>）</a></p>
    </div>
    <div style="height: 40px;"></div>
    <p class="midashi" id="program">プログラム</p>
    <div style="height: 10px;"></div>

        <div class="ml-1">
          <h2 class="lg:text-xl max-lg:text-[16px] font-bold">
            1日目：7月18日(<span class="text-blue-500">土</span>)
          </h2>
        </div>
        <div style="height: 10px;"></div>
        <div class="ml-1" style="max-width: 56rem; letter-spacing: .025em; margin-bottom: 3px; line-height: 2.05;">
          <p>
            ○14:00～14:05　開会式<br>
            ○14:05～16:20　グループトーク<br>
            少人数のグループでトークをします。吃音に関すること、日常のことなど、テーマはさまざま。<br>
            ○16:30～17:30　講演（ゲスト：）<br>
            ○19:00～21:00　夕食（近隣の飲食店を利用）<br>
            ○21:00～　フリータイム（入浴、歓談など）<br>
            夕食のあとは自由時間です。<br>
            ※門限は23:00となります。</p>
            </p>
        </div>
        <div style="height: 16px;"></div>
        <div class="ml-1">
          <h2 class="lg:text-xl max-lg:text-[16px] font-bold">
            2日目：7月19日(<span class="text-red-500">日</span>)
          </h2>
        </div>
        <div style="height: 10px;"></div>
        <div class="ml-1" style="max-width: 56rem; letter-spacing: .025em; margin-bottom: 3px; line-height: 2.05;">
            <p>
              ○7:00〜8:30　朝食（ホテルのビュッフェ）<br>
              ○9:00～10:00　マイメッセージ<br>
              吃音にまつわる体験、吃音への思い、みんなに伝えたいことなど、みんなの前で自由に発表していただきます。<br>（発表は希望者のみ）<br>
              ○10:10～11:10　クイズ大会<br>
              ○11:20～11:40　閉会式<br>
              ○13:00～　昼食（近隣の飲食店を利用予定）<br>
              自由参加・当日支払いとなります。<br>
            </p>
        </div>
        <div style="height: 40px;"></div>
        <span class="midashi" id="timetable">タイムテーブル</span>
        <div style="height: 20px;"></div>
        <div class="ml-1">
          <p>※プログラムや時間は変更する可能性があります。<br>
            ※表示の都合上、イベントのタイトルなどが見えづらい場合があります。<br>
            <br>
          イベントをタップすることで詳細を確認できます。</p>
        </div>
        <div class="flex justify-center mt-8">
          <label class="toggle-button-4 relative flex items-center w-[262px] h-[52px] rounded-[25px] border cursor-pointer">
            <input type="checkbox" id="dateToggle" class="absolute opacity-0 w-0 h-0">
        
            <!-- スライダー -->
            <span class="slider absolute top-1 left-1 w-32 h-10 bg-[#cb5757] rounded-full transition-all duration-700 ease-[cubic-bezier(0.4,0,0.2,1)] z-0"></span>
        
            <!-- 左日付（初期左端） -->
            <span class="text-white date date-left absolute top-1/2 left-1 transform -translate-y-1/2 w-32 h-10 flex items-center justify-center font-semibold z-10 pointer-events-none transition-all duration-700 ease-in-out">
              7月18日(<span class="text-blue-300">土</span>)
            </span>
        
            <!-- 右日付（初期左端、スライドで右端へ） -->
            <span class="text-white date date-right absolute top-1/2 left-1 transform -translate-y-1/2 w-32 h-10 flex items-center justify-center font-semibold z-10 pointer-events-none transition-all duration-700 ease-in-out opacity-0">
              7月19日(<span class="text-red-200">日</span>)
            </span>
          </label>
        </div>

      <div style="height: 24px;"></div>
      <div class="flex justify-center">
      <div id="tableContainer" class="mx-auto overflow-auto max-h-[500px] max-w-[64rem] border rounded-md shadow-md bg-gray-50 relative">
        <div class="min-w-[600px] relative z-0">

          <table id="timetable" class="border-collapse w-full text-sm relative table-fixed">
            <thead class="table_color sticky top-0 z-[50]">
              <tr>
                <th class="sticky left-0 table_color z-[60] border-b px-4 py-2 text-left text-center w-14"></th>
                {venues.map((venue, i) => (
                  <th class="h-[60px] px-4 py-2 text-center text-white font-medium relative border-b zen-kaku-gothic-new"
                      style={`width: ${venueWidths[i]}px;`}>
                    {venue}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {times.map(time => (
                <tr data-time={time} class="h-[60px] border-gray-200">
                  <td class="absolute sticky text-black bg-white text-center left-0 z-[10] px-2 py-2 font-medium zen-kaku-gothic-new">{time}</td>
                  {venues.map((_, i) => (
                    <td class="border-t relative px-4 py-2" style={`width: ${venueWidths[i]}px;`}></td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>

          <!-- イベントブロックレイヤー -->
          <div id="eventsLayer" class="absolute top-0 left-0 w-full h-full zen-kaku-gothic-new"></div>

          <!-- 現在時刻バー -->
          <div id="currentTimeBar"
     class="absolute h-[2px] bg-red-500 z-[0] max-md:w-[109.5%] md:w-[100%]"
     style="left: 0; top: 0;"></div>
          <div id="currentTimeLabel" class="absolute left-[44%] -translate-y-1/2 bg-red-500 text-xs text-white px-2 py-[2px] rounded-full shadow z-[20] zen-kaku-gothic-new" style="top:0;">現在 --</div>
        </div>
      </div>
      </div>
      <div style="height: 120px"></div>
    

      <!-- モーダル -->
      <div id="eventModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-[20000] zen-kaku-gothic-new">
        <div class="bg-white p-6 rounded-3xl shadow-lg max-w-sm w-2/3 relative">
          <button id="modalClose" class="absolute top-1 right-5 text-gray-500 hover:text-black text-[24px]">&times;</button>
          <h3 id="modalTitle" class="font-bold text-lg mb-2"></h3>
          <p id="modalTime" class="text-sm text-black mt-2"></p>
          <div style="height: 10px"></div>
          <p id="modalDescription" class="text-sm text-black whitespace-pre-wrap"></p>
          
        </div>
      </div>
    </div>
  </div>

  <script>
    const container = document.getElementById("tableContainer")!;
    const tbody = document.querySelector("#timetable tbody")!;
    const eventsLayer = document.getElementById("eventsLayer")!;

    // 🔸 日付ごとのイベント一覧
    const eventsData = {
      "10/12": [
        { start: "12:30", end: "13:30", venue: "研修室AB", name: "受付", description: "" },
        { start: "13:30", end: "13:45", venue: "研修室AB", name: "開会式", description: "" },
        { start: "13:50", end: "16:00", venue: "研修室AB", name: "グループトーク", description: "" },
        { start: "16:00", end: "17:00", venue: "羽衣青少年センター", name: "チェックイン", description: "" },
        { start: "17:00", end: "20:00", venue: "バーベキューガーデン羽衣", name: "BBQ", description: "" },
        { start: "20:00", end: "22:00", venue: "研修室AB", name: "フリータイム", description: "" },
      ],
      "10/13": [
        { start: "08:00", end: "09:00", venue: "羽衣青少年センター", name: "朝食", description: "" },
        { start: "09:30", end: "11:00", venue: "研修室C", name: "ワークショップ", description: "" },
        { start: "11:00", end: "12:00", venue: "研修室AB", name: "閉会式", description: "" },
      ]
    };

    let currentDate = "10/12";
    let eventsList: any[] = [];

    // イベントブロックを生成
    function renderEvents() {
      eventsLayer.innerHTML = "";
      eventsList = eventsData[currentDate].map(ev => {
        const div = document.createElement("div");
        div.className = "rounded absolute bg-yellow-300 border border-gray-300 text-black px-2 py-2 z-[0] flex flex-col cursor-pointer";
        const title = document.createElement("div");
        title.className = "font-medium text-sm";
        title.textContent = ev.name;
        const time = document.createElement("div");
        time.className = "text-xs text-black mt-1";
        time.textContent = `${ev.start}〜${ev.end}`;
        div.appendChild(title);
        div.appendChild(time);
        eventsLayer.appendChild(div);
        ev.div = div;
        return ev;
      });
      positionEvents();
      setupModal();
    }

    function positionEvents() {
      const containerRect = container.getBoundingClientRect();
      const rows = [...tbody.querySelectorAll("tr")];

      eventsList.forEach(ev => {
        const venueIndex = ["研修室AB","研修室C","羽衣青少年センター","バーベキューガーデン羽衣"].indexOf(ev.venue);
        if (venueIndex === -1) return;

        const td = tbody.querySelectorAll("tr:first-child td")[venueIndex + 1]!;
        const tdRect = td.getBoundingClientRect();

        const [sh, sm] = ev.start.split(":").map(Number);
        const [eh, em] = ev.end.split(":").map(Number);
        const startMinutes = sh*60 + sm;
        const endMinutes = eh*60 + em;

        let baseRow = rows[0]!;
        for (let row of rows) {
          const rowMinutes = row.dataset.time!.split(":").map(Number).reduce((h,m)=>h*60+m);
          if (rowMinutes <= startMinutes) baseRow = row;
          else break;
        }
        const nextRow = baseRow.nextElementSibling || baseRow;
        const baseRect = baseRow.getBoundingClientRect();
        const nextRect = nextRow.getBoundingClientRect();
        const rowStartMinutes = baseRow.dataset.time!.split(":").map(Number).reduce((h,m)=>h*60+m);
        const ratio = (startMinutes - rowStartMinutes)/60;
        const topPx = baseRect.top - containerRect.top + ratio*(nextRect.top - baseRect.top) + container.scrollTop;
        const heightPx = (endMinutes - startMinutes)/60 * baseRect.height;
        const widthPx = tdRect.width;
        ev.div.style.top = `${topPx}px`;
        ev.div.style.left = `${tdRect.left - containerRect.left + container.scrollLeft - 1.5}px`;
        ev.div.style.width = `${widthPx}px`;
        ev.div.style.height = `${heightPx}px`;
      });
    }

    // モーダル
    function setupModal() {
      const modal = document.getElementById("eventModal")!;
      const modalTitle = document.getElementById("modalTitle")!;
      const modalDescription = document.getElementById("modalDescription")!;
      const modalTime = document.getElementById("modalTime")!;
      const modalClose = document.getElementById("modalClose")!;

      eventsList.forEach(ev => {
        ev.div.addEventListener("click", () => {
          modalTitle.textContent = ev.name;
          modalDescription.textContent = ev.description || "詳細情報なし";
          modalTime.textContent = `時間：${ev.start}〜${ev.end}`;
          modal.classList.remove("hidden");
          modal.classList.add("flex");
        });
      });

      modalClose.addEventListener("click", () => modal.classList.add("hidden"));
      modal.addEventListener("click", e => {
        if (e.target === modal) modal.classList.add("hidden");
      });
    }

    // 現在時刻バー更新
    const bar = document.getElementById("currentTimeBar")!;
    const label = document.getElementById("currentTimeLabel")!;
    function updateTimeBar() {
      const now = new Date();
      const currentMinutes = now.getHours()*60 + now.getMinutes();
      const rows = [...tbody.querySelectorAll("tr")] as HTMLTableRowElement[];
      let visible = false;
      for (let i=0; i<rows.length-1; i++) {
        const [sh,sm] = rows[i]!.dataset.time!.split(":").map(Number);
        const [eh,em] = rows[i+1]!.dataset.time!.split(":").map(Number);
        const startM = sh!*60 + sm!;
        const endM = eh!*60 + em!;
        if (currentMinutes >= startM && currentMinutes < endM) {
          const startRect = rows[i]!.getBoundingClientRect();
          const endRect = rows[i+1]!.getBoundingClientRect();
          const parentRect = container.getBoundingClientRect();
          const ratio = (currentMinutes - startM)/(endM - startM);
          const offset = startRect.top + ratio*(endRect.top - startRect.top);
          const topPos = offset - parentRect.top + container.scrollTop;
          bar.style.top = `${topPos}px`;
          label.style.top = `${topPos}px`;
          label.textContent = `現在時刻 ${String(now.getHours()).padStart(2,"0")}:${String(now.getMinutes()).padStart(2,"0")}`;
          visible = true;
          break;
        }
      }
      if (!visible) { bar.style.top = "-9999px"; label.style.top = "-9999px"; }
    }

    

    // 初期描画
    renderEvents();
    updateTimeBar();
    setInterval(updateTimeBar, 30000);
    container.addEventListener("scroll", positionEvents);
    window.addEventListener("resize", positionEvents);

    // 🔸 日付切り替えボタン処理
    document.querySelectorAll(".date-btn").forEach(btn => {
  const button = btn as HTMLButtonElement;
  button.addEventListener("click", () => {
    document.querySelectorAll(".date-btn").forEach(b =>
      (b as HTMLButtonElement).classList.remove("bg-blue-300", "text-blue-800")
    );
    button.classList.add("bg-blue-300", "text-blue-800");
    currentDate = button.dataset.date!;
    renderEvents();
  });
});


    const toggle = document.getElementById("dateToggle")! as HTMLInputElement;;

toggle.addEventListener("change", () => {
  currentDate = toggle.checked ? "10/13" : "10/12";
  renderEvents();
});
  </script>
</Layout>
