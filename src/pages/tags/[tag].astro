---
import Layout from "../../layouts/Layout.astro";

type Frontmatter = {
  tags: string[];
  title: string;
  update?: string;
  date: string;
  description: string;
};

type Post = {
  frontmatter: Frontmatter;
  url: string;
};

type PageProps = {
  posts: Post[];
};

export async function getStaticPaths() {
  const allPosts: any = await Astro.glob("../posts/*.md");

  allPosts.sort(
    (a: any, b: any) =>
      new Date(b.frontmatter.pubDate).getTime() -
      new Date(a.frontmatter.pubDate).getTime()
  );

  const uniqueTags: any = [
    ...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat()),
  ];
  return uniqueTags.map((tag: any) => {
    const filteredPosts = allPosts.filter((post: any) =>
      post.frontmatter.tags.includes(tag)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params as { tag: string };
const { posts } = Astro.props as PageProps;

const filteredPosts: any = posts.filter((post: any) =>
  post.frontmatter.tags.includes(tag)
);

// タグ名ごとの色を定義
const tagColors: Record<string, string> = {
  お知らせ: "bg-orange-600",
  受付: "bg-green-600",
  重要: "bg-red-600",
  // 必要なタグをここに追加
};
---

<Layout title=`タグ: ${tag}｜第8回うぃーすた全国交流会`>
  <div class="mt-[140px] lg:mt-[140px] margin-default text-color zen-kaku-gothic-new">
    <div style="height: 10px;"></div>
    <div class="flex">
      <a
        href="#"
        onclick="history.back(); return false;"
        class="text-sm lg:text-[17px] zen-kaku-gothic-new font-medium tag-hover"
        style="margin-right: 10px; display: flex; align-items: center;"
        ><i class="ri-arrow-left-line" style="font-size: 20px;"></i>&nbsp;戻る</a
      >
    </div>
    <div style="height: 20px;"></div>
    <span class="midashi">タグ：{tag}</span>
    <div style="height: 20px;"></div>
    <ul style="padding-left: 0.25rem">
      {filteredPosts.map((post: any) => (
        <li>
          <div class="flex items-center gap-2 flex-wrap">
            {/* 日付 */}
            {post.frontmatter.update ? (
              <div class="update-content flex items-center gap-1">
                <a class="text-sm">{post.frontmatter.date}</a>
                <i class="ri-loop-left-line" />
                <a class="text-sm">{post.frontmatter.update}</a>
              </div>
            ) : (
              <div class="mb-[2px] no-update-content mr-2">
                <a class="text-base max-lg:text-xs">{post.frontmatter.date}</a>
              </div>
            )}
    
            {/* タグ */}
            {post.frontmatter.tags && (
              <div class="flex gap-1 flex-wrap mr-2">
                {post.frontmatter.tags.map((tag: string) => (
                  <span
                    class={`text-xs px-2 py-[2px] rounded-full text-white ${
                      tagColors[tag] || "bg-gray-500"
                    }`}
                  >
                    {tag}
                  </span>
                ))}
              </div>
            )}
    
            {/* タイトル */}
            <a class="lg:mb-[2px] text-lg max-lg:text-sm font-medium hover-color" href={post.url}>
              {post.frontmatter.title}
            </a>
          </div>
    
          {/* 説明文 */}
          <a class="text-base block mt-1">{post.frontmatter.description}</a>
          <div style="height: 10px;" />
        </li>
      ))}
    </ul>
    
  </div>
  </div>
</Layout>
